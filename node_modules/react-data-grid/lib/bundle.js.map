{"version":3,"file":"bundle.js","sources":["../src/utils/colSpanUtils.ts","../src/utils/domUtils.ts","../src/utils/eventUtils.ts","../src/utils/keyboardUtils.ts","../src/utils/renderMeasuringCells.tsx","../src/utils/selectedCellUtils.ts","../src/style/cell.ts","../src/utils/styleUtils.ts","../src/utils/index.ts","../src/hooks/useRowSelection.ts","../src/formatters/checkboxFormatter.tsx","../src/DataGridDefaultRenderersProvider.ts","../src/formatters/SelectCellFormatter.tsx","../src/formatters/valueFormatter.tsx","../src/formatters/toggleGroupFormatter.tsx","../src/Columns.tsx","../src/hooks/useCalculatedColumns.ts","../src/hooks/useLayoutEffect.ts","../src/hooks/useColumnWidths.ts","../src/hooks/useGridDimensions.ts","../src/hooks/useLatestFunc.ts","../src/hooks/useRovingTabIndex.ts","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/DragHandle.tsx","../src/EditCell.tsx","../src/GroupCell.tsx","../src/style/row.ts","../src/GroupRow.tsx","../src/headerRenderer.tsx","../src/HeaderCell.tsx","../src/HeaderRow.tsx","../src/Cell.tsx","../src/Row.tsx","../src/ScrollToCell.tsx","../src/SummaryCell.tsx","../src/SummaryRow.tsx","../src/sortStatus.tsx","../src/style/core.ts","../src/DataGrid.tsx","../src/editors/textEditor.tsx"],"sourcesContent":["import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","import type { Maybe } from '../types';\n\nexport function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function scrollIntoView(element: Maybe<Element>) {\n  element?.scrollIntoView({ inline: 'nearest', block: 'nearest' });\n}\n","import type { CellEvent } from '../types';\n\nexport function createCellEvent<E extends React.SyntheticEvent<HTMLDivElement>>(\n  event: E\n): CellEvent<E> {\n  let defaultPrevented = false;\n  const cellEvent = {\n    ...event,\n    preventGridDefault() {\n      defaultPrevented = true;\n    },\n    isGridDefaultPrevented() {\n      return defaultPrevented;\n    }\n  };\n\n  Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));\n\n  return cellEvent;\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return target.matches(\n      '.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child, .rdg-editor-container > div:only-child > label:only-child > :only-child'\n    );\n  }\n  return false;\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn } from '../types';\n\nconst measuringCellClassname = css`\n  @layer rdg.MeasuringCell {\n    contain: strict;\n    grid-row: 1;\n    visibility: hidden;\n  }\n`;\n\nexport function renderMeasuringCells<R, SR>(viewportColumns: readonly CalculatedColumn<R, SR>[]) {\n  return (\n    <>\n      {viewportColumns.map(({ key, idx, minWidth, maxWidth }) => (\n        <div\n          key={key}\n          className={measuringCellClassname}\n          style={{ gridColumnStart: idx + 1, minWidth, maxWidth }}\n          data-measuring-cell-key={key}\n        />\n      ))}\n    </>\n  );\n}\n","import type { CalculatedColumn, Position, GroupRow, CellNavigationMode, Maybe } from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows,\n  isGroupRow\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return !isGroupRow(row) && isCellEditable(column, row);\n}\n\nexport function isCellEditable<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.editor != null &&\n    !column.rowGroup &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nfunction getSelectedCellColSpan<R, SR>({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  lastFrozenColumnIndex,\n  column,\n  isGroupRow\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'topSummaryRows' | 'bottomSummaryRows' | 'isGroupRow' | 'lastFrozenColumnIndex'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const minRowIdx = -1 - topSummaryRowsCount;\n  if (rowIdx === minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (topSummaryRows && rowIdx > minRowIdx && rowIdx <= topSummaryRowsCount + minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    if (!isGroupRow(row)) {\n      return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    }\n    return undefined;\n  }\n\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds,\n  isGroupRow\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n\n  const setColSpan = (moveRight: boolean) => {\n    if (nextRowIdx >= 0 && nextRowIdx < rows.length) {\n      const row = rows[nextRowIdx];\n      if (isGroupRow(row)) return;\n    }\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n\n  if (cellNavigationMode === 'CHANGE_ROW') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      const isLastRow = nextRowIdx === maxRowIdx;\n      if (!isLastRow) {\n        nextIdx = 0;\n        nextRowIdx += 1;\n      }\n    } else if (isBeforeFirstColumn) {\n      const isFirstRow = nextRowIdx === minRowIdx;\n      if (!isFirstRow) {\n        nextRowIdx -= 1;\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // Exit the grid if we're at the first or last cell of the grid\n  const atLastCellInRow = idx === maxColIdx;\n  const atFirstCellInRow = idx === 0;\n  const atLastRow = rowIdx === maxRowIdx;\n  const atFirstRow = rowIdx === minRowIdx;\n\n  return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n}\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  @layer rdg.Cell {\n    /* max-content does not work with size containment\n     * dynamically switching between different containment styles incurs a heavy relayout penalty\n     * Chromium bug: at odd zoom levels or subpixel positioning, layout/paint containment can make cell borders disappear\n     *   https://bugs.chromium.org/p/chromium/issues/detail?id=1326946\n     */\n    contain: style;\n    position: relative; /* needed for absolute positioning to work */\n    padding-block: 0;\n    padding-inline: 8px;\n    border-inline-end: 1px solid var(--rdg-border-color);\n    border-block-end: 1px solid var(--rdg-border-color);\n    grid-row-start: var(--rdg-grid-row-start);\n    background-color: inherit;\n\n    white-space: nowrap;\n    overflow: hidden;\n    overflow: clip;\n    text-overflow: ellipsis;\n    outline: none;\n\n    &[aria-selected='true'] {\n      outline: 2px solid var(--rdg-selection-color);\n      outline-offset: -2px;\n    }\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nexport const cellFrozen = css`\n  @layer rdg.Cell {\n    position: sticky;\n    /* Should have a higher value than 0 to show up above unfrozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  @layer rdg.Cell {\n    box-shadow: calc(2px * var(--rdg-sign)) 0 5px -2px rgba(136, 136, 136, 0.3);\n  }\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style/cell';\n\nexport function getRowStyle(rowIdx: number, height?: number): CSSProperties {\n  if (height !== undefined) {\n    return {\n      '--rdg-grid-row-start': rowIdx,\n      '--rdg-row-height': `${height}px`\n    } as unknown as CSSProperties;\n  }\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan?: number\n): React.CSSProperties {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n","import type { CalculatedColumn } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './eventUtils';\nexport * from './keyboardUtils';\nexport * from './renderMeasuringCells';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\n\nexport const { min, max, round, floor, sign, abs } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { createContext, useContext } from 'react';\n\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport type { CheckboxFormatterProps } from '../types';\n\nconst checkboxLabel = css`\n  @layer rdg.CheckboxLabel {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    inset: 0;\n    margin-inline-end: 1px; /* align checkbox in row group cell */\n  }\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  @layer rdg.CheckboxInput {\n    all: unset;\n  }\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  @layer rdg.CheckboxIcon {\n    content: '';\n    inline-size: 20px;\n    block-size: 20px;\n    border: 2px solid var(--rdg-border-color);\n    background-color: var(--rdg-background-color);\n\n    .${checkboxInput}:checked + & {\n      background-color: var(--rdg-checkbox-color);\n      outline: 4px solid var(--rdg-background-color);\n      outline-offset: -6px;\n    }\n\n    .${checkboxInput}:focus + & {\n      border-color: var(--rdg-checkbox-focus-color);\n    }\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  @layer rdg.CheckboxLabel {\n    cursor: default;\n\n    .${checkbox} {\n      border-color: var(--rdg-checkbox-disabled-border-color);\n      background-color: var(--rdg-checkbox-disabled-background-color);\n    }\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\nexport function checkboxFormatter({ onChange, ...props }: CheckboxFormatterProps) {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label\n      className={clsx(checkboxLabelClassname, {\n        [checkboxLabelDisabledClassname]: props.disabled\n      })}\n    >\n      <input\n        type=\"checkbox\"\n        {...props}\n        className={checkboxInputClassname}\n        onChange={handleChange}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n","import { createContext, useContext } from 'react';\n\nimport type { Renderers, Maybe } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DataGridDefaultRenderersContext = createContext<Maybe<Renderers<any, any>>>(undefined);\n\nexport const DataGridDefaultRenderersProvider = DataGridDefaultRenderersContext.Provider;\n\nexport function useDefaultRenderers<R, SR>(): Maybe<Renderers<R, SR>> {\n  return useContext(DataGridDefaultRenderersContext);\n}\n","import type { CheckboxFormatterProps } from '../types';\nimport { useDefaultRenderers } from '../DataGridDefaultRenderersProvider';\n\ntype SharedInputProps = Pick<\n  CheckboxFormatterProps,\n  'disabled' | 'tabIndex' | 'aria-label' | 'aria-labelledby'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const checkboxFormatter = useDefaultRenderers()!.checkboxFormatter!;\n\n  return (\n    <>\n      {checkboxFormatter({\n        'aria-label': ariaLabel,\n        'aria-labelledby': ariaLabelledBy,\n        tabIndex,\n        disabled,\n        checked: value,\n        onChange\n      })}\n    </>\n  );\n}\n","import type { FormatterProps } from '../types';\n\nexport function valueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  try {\n    return <>{props.row[props.column.key as keyof R]}</>;\n  } catch {\n    return null;\n  }\n}\n","import { css } from '@linaria/core';\n\nimport type { GroupFormatterProps } from '../types';\n\nconst groupCellContent = css`\n  @layer rdg.GroupCellContent {\n    outline: none;\n  }\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  @layer rdg.GroupCellCaret {\n    margin-inline-start: 4px;\n    stroke: currentColor;\n    stroke-width: 1.5px;\n    fill: transparent;\n    vertical-align: middle;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function toggleGroupFormatter<R, SR>(props: GroupFormatterProps<R, SR>) {\n  return <ToggleGroup {...props} />;\n}\n\nexport function ToggleGroup<R, SR>({\n  groupKey,\n  isExpanded,\n  tabIndex,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span className={groupCellContentClassname} tabIndex={tabIndex} onKeyDown={handleKeyDown}>\n      {groupKey as string}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, FormatterProps, GroupFormatterProps, HeaderRendererProps } from './types';\nimport { SelectCellFormatter } from './formatters';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction HeaderRenderer(props: HeaderRendererProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select All\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ type: 'HEADER', checked });\n      }}\n    />\n  );\n}\n\nfunction SelectFormatter(props: FormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ type: 'ROW', row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: GroupFormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ type: 'ROW', row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return <HeaderRenderer {...props} />;\n  },\n  formatter(props) {\n    return <SelectFormatter {...props} />;\n  },\n  groupFormatter(props) {\n    return <SelectGroupFormatter {...props} />;\n  }\n};\n","import { useMemo } from 'react';\n\nimport { clampColumnWidth, max, min } from '../utils';\nimport type { CalculatedColumn, Column, Maybe } from '../types';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport type { DataGridProps } from '../DataGrid';\nimport { valueFormatter, toggleGroupFormatter } from '../formatters';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 80;\n\ninterface CalculatedColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy: Maybe<readonly string[]>;\n  viewportWidth: number;\n  scrollLeft: number;\n  measuredColumnWidths: ReadonlyMap<string, number>;\n  resizedColumnWidths: ReadonlyMap<string, number>;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  measuredColumnWidths,\n  resizedColumnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? valueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, groupBy } = useMemo((): {\n    columns: readonly CalculatedColumn<R, SR>[];\n    colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    lastFrozenColumnIndex: number;\n    groupBy: readonly string[];\n  } => {\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map((rawColumn) => {\n      const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      const frozen = rowGroup || rawColumn.frozen || false;\n\n      const column: Mutable<CalculatedColumn<R, SR>> = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        width: rawColumn.width ?? defaultWidth,\n        minWidth: rawColumn.minWidth ?? defaultMinWidth,\n        maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        formatter: rawColumn.formatter ?? defaultFormatter\n      };\n\n      if (rowGroup) {\n        column.groupFormatter ??= toggleGroupFormatter;\n      }\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultFormatter,\n    defaultResizable,\n    defaultSortable,\n    rawGroupBy\n  ]);\n\n  const { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    templateColumns: readonly string[];\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns: string[] = [];\n\n    for (const column of columns) {\n      let width =\n        resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width;\n\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        // This is a placeholder width so we can continue to use virtualization.\n        // The actual value is set after the column is rendered\n        width = column.minWidth;\n      }\n      templateColumns.push(`${width}px`);\n      columnMetrics.set(column, { width, left });\n      left += width;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {};\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [measuredColumnWidths, resizedColumnWidths, columns, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  };\n}\n","// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport type { CalculatedColumn, StateSetter } from '../types';\nimport { useLayoutEffect } from './useLayoutEffect';\nimport type { DataGridProps } from '../DataGrid';\n\nexport function useColumnWidths<R, SR>(\n  columns: readonly CalculatedColumn<R, SR>[],\n  viewportColumns: readonly CalculatedColumn<R, SR>[],\n  templateColumns: readonly string[],\n  gridRef: React.RefObject<HTMLDivElement>,\n  gridWidth: number,\n  resizedColumnWidths: ReadonlyMap<string, number>,\n  measuredColumnWidths: ReadonlyMap<string, number>,\n  setResizedColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  setMeasuredColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  onColumnResize: DataGridProps<R, SR>['onColumnResize']\n) {\n  const prevGridWidthRef = useRef(gridWidth);\n  const columnsCanFlex: boolean = columns.length === viewportColumns.length;\n  // Allow columns to flex again when...\n  const ignorePreviouslyMeasuredColumns: boolean =\n    // there is enough space for columns to flex and the grid was resized\n    columnsCanFlex && gridWidth !== prevGridWidthRef.current;\n  const newTemplateColumns = [...templateColumns];\n  const columnsToMeasure: string[] = [];\n\n  for (const { key, idx, width } of viewportColumns) {\n    if (\n      typeof width === 'string' &&\n      (ignorePreviouslyMeasuredColumns || !measuredColumnWidths.has(key)) &&\n      !resizedColumnWidths.has(key)\n    ) {\n      newTemplateColumns[idx] = width;\n      columnsToMeasure.push(key);\n    }\n  }\n\n  const gridTemplateColumns = newTemplateColumns.join(' ');\n\n  useLayoutEffect(() => {\n    prevGridWidthRef.current = gridWidth;\n    updateMeasuredWidths(columnsToMeasure);\n  });\n\n  function updateMeasuredWidths(columnsToMeasure: readonly string[]) {\n    if (columnsToMeasure.length === 0) return;\n\n    setMeasuredColumnWidths((measuredColumnWidths) => {\n      const newMeasuredColumnWidths = new Map(measuredColumnWidths);\n      let hasChanges = false;\n\n      for (const key of columnsToMeasure) {\n        const measuredWidth = measureColumnWidth(gridRef, key);\n        hasChanges ||= measuredWidth !== measuredColumnWidths.get(key);\n        if (measuredWidth === undefined) {\n          newMeasuredColumnWidths.delete(key);\n        } else {\n          newMeasuredColumnWidths.set(key, measuredWidth);\n        }\n      }\n\n      return hasChanges ? newMeasuredColumnWidths : measuredColumnWidths;\n    });\n  }\n\n  function handleColumnResize(column: CalculatedColumn<R, SR>, nextWidth: number | 'max-content') {\n    const { key: resizingKey } = column;\n    const newTemplateColumns = [...templateColumns];\n    const columnsToMeasure: string[] = [];\n\n    for (const { key, idx, width } of viewportColumns) {\n      if (resizingKey === key) {\n        const width = typeof nextWidth === 'number' ? `${nextWidth}px` : nextWidth;\n        newTemplateColumns[idx] = width;\n      } else if (columnsCanFlex && typeof width === 'string' && !resizedColumnWidths.has(key)) {\n        newTemplateColumns[idx] = width;\n        columnsToMeasure.push(key);\n      }\n    }\n\n    gridRef.current!.style.gridTemplateColumns = newTemplateColumns.join(' ');\n    const measuredWidth =\n      typeof nextWidth === 'number' ? nextWidth : measureColumnWidth(gridRef, resizingKey)!;\n\n    // TODO: remove\n    // need flushSync to keep frozen column offsets in sync\n    // we may be able to use `startTransition` or even `requestIdleCallback` instead\n    flushSync(() => {\n      setResizedColumnWidths((resizedColumnWidths) => {\n        const newResizedColumnWidths = new Map(resizedColumnWidths);\n        newResizedColumnWidths.set(resizingKey, measuredWidth);\n        return newResizedColumnWidths;\n      });\n      updateMeasuredWidths(columnsToMeasure);\n    });\n\n    onColumnResize?.(column.idx, measuredWidth);\n  }\n\n  return {\n    gridTemplateColumns,\n    handleColumnResize\n  } as const;\n}\n\nfunction measureColumnWidth(gridRef: React.RefObject<HTMLDivElement>, key: string) {\n  const selector = `[data-measuring-cell-key=\"${CSS.escape(key)}\"]`;\n  const measuringCell = gridRef.current!.querySelector(selector);\n  return measuringCell?.getBoundingClientRect().width;\n}\n","import { useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useGridDimensions() {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current!;\n    const { width, height } = gridRef.current!.getBoundingClientRect();\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - offsetHeight + clientHeight;\n\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const size = entries[0].contentBoxSize[0];\n      // we use flushSync here to avoid flashing scrollbars\n      flushSync(() => {\n        setInlineSize(size.inlineSize);\n        setBlockSize(size.blockSize);\n      });\n    });\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, inlineSize, blockSize] as const;\n}\n","import { useRef, useEffect, useCallback } from 'react';\n\nimport type { Maybe } from '../types';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends Maybe<(...args: any[]) => any>>(fn: T): T {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  const callbackFn = useCallback((...args: Parameters<NonNullable<T>>) => {\n    ref.current!(...args);\n  }, []);\n\n  // @ts-expect-error\n  return fn ? callbackFn : fn;\n}\n","import { useState } from 'react';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingTabIndex(isSelected: boolean) {\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocusable = isSelected && !isChildFocused;\n\n  return {\n    tabIndex: isFocusable ? 0 : -1,\n    childTabIndex: isSelected ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, GroupRow, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx,\n  isGroupRow\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns,\n    isGroupRow\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { useMemo } from 'react';\n\nimport { floor, max, min } from '../utils';\nimport type { GroupRow, Maybe, RowHeightArgs } from '../types';\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number | ((args: RowHeightArgs<R>) => number);\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds: Maybe<ReadonlySet<unknown>>;\n  enableVirtualization: boolean;\n}\n\n// TODO: https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || rowGrouper == null) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row: R | GroupRow<R>) => {\n      const currentRowHeight = isGroupRow(row)\n        ? rowHeight({ type: 'GROUP', row })\n        : rowHeight({ type: 'ROW', row });\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [isGroupRow, rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  @layer rdg.DragHandle {\n    cursor: move;\n    position: absolute;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 8px;\n    block-size: 8px;\n    background-color: var(--rdg-selection-color);\n\n    &:hover {\n      inline-size: 16px;\n      block-size: 16px;\n      border: 2px solid var(--rdg-selection-color);\n      background-color: var(--rdg-background-color);\n    }\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  rows,\n  columns,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const { rowIdx } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  return (\n    <div\n      className={cellDragHandleClassname}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { getCellStyle, getCellClassname, onEditorNavigation, createCellEvent } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellRendererProps,\n  EditCellKeyDownArgs,\n  EditorProps,\n  Maybe,\n  Omit\n} from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  @layer rdg.EditCell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<EditorProps<R, SR>, 'onRowChange' | 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  rowIdx: number;\n  onRowChange: (row: R, commitChanges: boolean, shouldFocusCell: boolean) => void;\n  closeEditor: (shouldFocusCell: boolean) => void;\n  navigate: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n  onKeyDown: Maybe<(args: EditCellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  onRowChange,\n  closeEditor,\n  onKeyDown,\n  navigate\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true, false);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (onKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onKeyDown(\n        {\n          mode: 'EDIT',\n          row,\n          column,\n          rowIdx,\n          navigate() {\n            navigate(event);\n          },\n          onClose: onEditorClose\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n\n    if (event.key === 'Escape') {\n      // Discard changes\n      onClose(false);\n    } else if (event.key === 'Enter') {\n      onClose(true);\n    } else if (onEditorNavigation(event)) {\n      navigate(event);\n    }\n  }\n\n  function onClose(commitChanges: boolean, shouldFocusCell = true) {\n    if (commitChanges) {\n      onRowChange(row, true, shouldFocusCell);\n    } else {\n      closeEditor(shouldFocusCell);\n    }\n  }\n\n  function onEditorRowChange(row: R, commitChangesAndFocus = false) {\n    onRowChange(row, commitChangesAndFocus, commitChangesAndFocus);\n  }\n\n  function onEditorClose(commitChanges = false) {\n    onClose(commitChanges);\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.renderFormatter && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={handleKeyDown}\n      onMouseDownCapture={cancelFrameRequest}\n    >\n      {column.editor != null && (\n        <>\n          {column.editor({\n            column,\n            row,\n            onRowChange: onEditorRowChange,\n            onClose: onEditorClose\n          })}\n          {column.editorOptions?.renderFormatter &&\n            column.formatter({\n              column,\n              row,\n              isCellEditable: true,\n              tabIndex: -1,\n              onRowChange: onEditorRowChange\n            })}\n        </>\n      )}\n    </div>\n  );\n}\n","import { memo } from 'react';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<\n  GroupRowRendererProps<R, SR>,\n  'id' | 'groupKey' | 'childRows' | 'isExpanded' | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!column.rowGroup || groupColumnIndex === column.idx) &&\n        column.groupFormatter?.({\n          groupKey,\n          childRows,\n          column,\n          row,\n          isExpanded,\n          tabIndex: childTabIndex,\n          toggleGroup\n        })}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  @layer rdg.Row {\n    display: contents;\n    line-height: var(--rdg-row-height);\n    background-color: var(--rdg-background-color);\n\n    &:hover {\n      background-color: var(--rdg-row-hover-background-color);\n    }\n\n    &[aria-selected='true'] {\n      background-color: var(--rdg-row-selected-background-color);\n\n      &:hover {\n        background-color: var(--rdg-row-selected-hover-background-color);\n      }\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  @layer rdg.FocusSink {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const rowSelectedClassname = 'rdg-row-selected';\n\nexport const rowSelectedWithFrozenCell = css`\n  @layer rdg.FocusSink {\n    &::before {\n      content: '';\n      display: inline-block;\n      height: 100%;\n      position: sticky;\n      inset-inline-start: 0;\n      border-inline-start: 2px solid var(--rdg-selection-color);\n    }\n  }\n`;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { RowSelectionProvider } from './hooks';\nimport { getRowStyle } from './utils';\nimport type { CalculatedColumn, GroupRow, Omit } from './types';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport { cell, cellFrozenLast } from './style/cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nexport interface GroupRowRendererProps<R, SR>\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  row: GroupRow<R>;\n  gridRowStart: number;\n  height: number;\n  level: number;\n  selectedCellIdx: number | undefined;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectGroup: (rowIdx: number) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nconst groupRow = css`\n  @layer rdg.GroupedRow {\n    &:not([aria-selected='true']) {\n      background-color: var(--rdg-header-background-color);\n    }\n\n    > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n      border-inline-end: none;\n    }\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  row,\n  gridRowStart,\n  height,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectGroup,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function handleSelectGroup() {\n    selectGroup(rowIdx);\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={level}\n        aria-expanded={isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          {\n            [rowSelectedClassname]: selectedCellIdx === -1\n          }\n        )}\n        onClick={handleSelectGroup}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={id}\n            groupKey={groupKey}\n            childRows={childRows}\n            isExpanded={isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { css } from '@linaria/core';\n\nimport type { HeaderRendererProps } from './types';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersProvider';\n\nconst headerSortCell = css`\n  @layer rdg.SortableHeaderCell {\n    cursor: pointer;\n    display: flex;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`;\n\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  @layer rdg.SortableHeaderCellName {\n    flex-grow: 1;\n    overflow: hidden;\n    overflow: clip;\n    text-overflow: ellipsis;\n  }\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function headerRenderer<R, SR>({\n  column,\n  sortDirection,\n  priority,\n  onSort,\n  tabIndex\n}: HeaderRendererProps<R, SR>) {\n  if (!column.sortable) return <>{column.name}</>;\n\n  return (\n    <SortableHeaderCell\n      onSort={onSort}\n      sortDirection={sortDirection}\n      priority={priority}\n      tabIndex={tabIndex}\n    >\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  HeaderRendererProps<R, SR>,\n  'sortDirection' | 'onSort' | 'priority' | 'tabIndex'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  onSort,\n  sortDirection,\n  priority,\n  children,\n  tabIndex\n}: SortableHeaderCellProps<R, SR>) {\n  const sortStatus = useDefaultRenderers<R, SR>()!.sortStatus!;\n  function handleKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // stop propagation to prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLSpanElement>) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n\n  return (\n    <span\n      tabIndex={tabIndex}\n      className={headerSortCellClassname}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n    >\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>{sortStatus({ sortDirection, priority })}</span>\n    </span>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellStyle, getCellClassname, clampColumnWidth } from './utils';\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport defaultHeaderRenderer from './headerRenderer';\n\nconst cellResizable = css`\n  @layer rdg.HeaderCell {\n    touch-action: none;\n\n    &::after {\n      content: '';\n      cursor: col-resize;\n      position: absolute;\n      inset-block-start: 0;\n      inset-inline-end: 0;\n      inset-block-end: 0;\n      inline-size: 10px;\n    }\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  isCellSelected: boolean;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderCellProps<R, SR>) {\n  const isRtl = direction === 'rtl';\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable\n  });\n\n  const headerRenderer = column.headerRenderer ?? defaultHeaderRenderer;\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right, left } = currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      // prevents text selection in Chrome, which fixes scrolling the grid while dragging, and fixes re-size on an autosized column\n      event.preventDefault();\n      const { right, left } = currentTarget.getBoundingClientRect();\n      const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      if (width > 0) {\n        onColumnResize(column, clampColumnWidth(width, column));\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst === true && sortDirection === 'DESC') ||\n        (sortDescendingFirst !== true && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick() {\n    selectCell(column.idx);\n  }\n\n  function onDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    const { right, left } = event.currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    onColumnResize(column, 'max-content');\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell(0);\n    }\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      aria-colspan={colSpan}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onDoubleClick={column.resizable ? onDoubleClick : undefined}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      {headerRenderer({\n        column,\n        sortDirection,\n        priority,\n        onSort,\n        tabIndex: childTabIndex\n      })}\n    </div>\n  );\n}\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan, getRowStyle } from './utils';\nimport type { CalculatedColumn, Direction } from './types';\nimport type { DataGridProps } from './DataGrid';\nimport HeaderCell from './HeaderCell';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowSelectedClassname } from './style/row';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number | 'max-content') => void;\n  selectCell: (columnIdx: number) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n}\n\nconst headerRow = css`\n  @layer rdg.HeaderRow {\n    display: contents;\n    line-height: var(--rdg-header-row-height);\n    background-color: var(--rdg-header-background-color);\n    font-weight: bold;\n\n    & > .${cell} {\n      /* Should have a higher value than 0 to show up above regular cells */\n      z-index: 1;\n      position: sticky;\n      inset-block-start: 0;\n    }\n\n    & > .${cellFrozen} {\n      z-index: 2;\n    }\n  }\n`;\n\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  columns,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname, {\n        [rowSelectedClassname]: selectedCellIdx === -1\n      })}\n      style={getRowStyle(1)}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellStyle, getCellClassname, isCellEditable, createCellEvent } from './utils';\nimport type { CellRendererProps } from './types';\n\nconst cellCopied = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n  }\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n\n    &.${cellCopied} {\n      background-color: #9999ff;\n    }\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  rowIdx,\n  dragHandle,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n  const isEditable = isCellEditable(column, row);\n\n  function selectCellWrapper(openEditor?: boolean) {\n    selectCell({ rowIdx, idx: column.idx }, openEditor);\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onClick) {\n      const cellEvent = createCellEvent(event);\n      onClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleContextMenu(event: React.MouseEvent<HTMLDivElement>) {\n    if (onContextMenu) {\n      const cellEvent = createCellEvent(event);\n      onContextMenu({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onDoubleClick) {\n      const cellEvent = createCellEvent(event);\n      onDoubleClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper(true);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(column, newRow);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      aria-colspan={colSpan}\n      aria-readonly={!isEditable || undefined}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          {column.formatter({\n            column,\n            row,\n            isCellEditable: isEditable,\n            tabIndex: childTabIndex,\n            onRowChange: handleRowChange\n          })}\n          {dragHandle}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => JSX.Element;\n","import { memo, forwardRef, type RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport { RowSelectionProvider, useLatestFunc } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { CalculatedColumn, RowRendererProps } from './types';\nimport Cell from './Cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    gridRowStart,\n    height,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RowRendererProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const handleRowChange = useLatestFunc((column: CalculatedColumn<R, SR>, newRow: R) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row, rowIdx),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          rowIdx={rowIdx}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          dragHandle={isCellSelected ? selectedCellDragHandle : undefined}\n          onClick={onCellClick}\n          onDoubleClick={onCellDoubleClick}\n          onContextMenu={onCellContextMenu}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nconst RowComponent = memo(forwardRef(Row)) as <R, SR>(\n  props: RowRendererProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n\nexport default RowComponent;\n\nexport function defaultRowRenderer<R, SR>(key: React.Key, props: RowRendererProps<R, SR>) {\n  return <RowComponent key={key} {...props} />;\n}\n","import { useRef } from 'react';\n\nimport { useLayoutEffect } from './hooks';\nimport { scrollIntoView } from './utils';\n\nexport interface PartialPosition {\n  readonly idx?: number | undefined;\n  readonly rowIdx?: number | undefined;\n}\n\nexport default function ScrollToCell({\n  scrollToPosition: { idx, rowIdx },\n  gridElement,\n  setScrollToCellPosition\n}: {\n  scrollToPosition: PartialPosition;\n  gridElement: HTMLDivElement;\n  setScrollToCellPosition: (cell: null) => void;\n}) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    // scroll until the cell is completely visible\n    // this is needed if the grid has auto-sized columns\n    scrollIntoView(ref.current);\n  });\n\n  useLayoutEffect(() => {\n    function removeScrollToCell() {\n      setScrollToCellPosition(null);\n    }\n\n    const observer = new IntersectionObserver(removeScrollToCell, {\n      root: gridElement,\n      threshold: 1.0\n    });\n\n    observer.observe(ref.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [gridElement, setScrollToCellPosition]);\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        gridColumn: idx === undefined ? '1/-1' : idx + 1,\n        gridRow: rowIdx === undefined ? '1/-1' : rowIdx + 2\n      }}\n    />\n  );\n}\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CellRendererProps } from './types';\n\nexport const summaryCellClassname = css`\n  @layer rdg.SummaryCell {\n    inset-block-start: var(--rdg-summary-row-top);\n    inset-block-end: var(--rdg-summary-row-bottom);\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<\n  CellRendererProps<R, SR>,\n  'rowIdx' | 'column' | 'colSpan' | 'isCellSelected' | 'selectCell'\n>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell({ rowIdx, idx: column.idx });\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {column.summaryFormatter?.({ column, row, tabIndex: childTabIndex })}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan, getRowStyle } from './utils';\nimport type { RowRendererProps } from './types';\nimport SummaryCell from './SummaryCell';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\ntype SharedRowRendererProps<R, SR> = Pick<\n  RowRendererProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart' | 'selectCell'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  isTop: boolean;\n  showBorder: boolean;\n}\n\nconst summaryRow = css`\n  @layer rdg.SummaryRow {\n    line-height: var(--rdg-summary-row-height);\n\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst topSummaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      z-index: 1;\n    }\n\n    > .${cellFrozen} {\n      z-index: 2;\n    }\n  }\n`;\n\nexport const topSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-end: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nexport const bottomSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-start: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nconst topSummaryRowClassname = `rdg-top-summary-row ${topSummaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  isTop,\n  showBorder,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1,\n          [topSummaryRowClassname]: isTop,\n          [topSummaryRowBorderClassname]: isTop && showBorder,\n          [bottomSummaryRowBorderClassname]: !isTop && showBorder,\n          'rdg-bottom-summary-row': !isTop\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import { css } from '@linaria/core';\n\nimport type { SortStatusProps, SortIconProps, SortPriorityProps } from './types';\n\nconst arrow = css`\n  @layer rdg.SortIcon {\n    fill: currentColor;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function sortStatus({ sortDirection, priority }: SortStatusProps) {\n  return (\n    <>\n      {sortIcon({ sortDirection })}\n      {sortPriority({ priority })}\n    </>\n  );\n}\n\nexport function sortIcon({ sortDirection }: SortIconProps) {\n  if (sortDirection === undefined) return null;\n\n  return (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  );\n}\n\nexport function sortPriority({ priority }: SortPriorityProps) {\n  return priority;\n}\n","import { css } from '@linaria/core';\n\nimport { row } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 29%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n  --rdg-checkbox-disabled-border-color: #ccc;\n  --rdg-checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 79%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n  --rdg-checkbox-disabled-border-color: #000;\n  --rdg-checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  @layer rdg {\n    @layer Defaults,\n      FocusSink,\n      CheckboxInput,\n      CheckboxIcon,\n      CheckboxLabel,\n      Cell,\n      HeaderCell,\n      SummaryCell,\n      EditCell,\n      Row,\n      HeaderRow,\n      SummaryRow,\n      GroupedRow,\n      Root;\n\n    @layer Defaults {\n      *,\n      *::before,\n      *::after {\n        box-sizing: inherit;\n      }\n    }\n\n    @layer Root {\n      ${lightTheme}\n      --rdg-selection-color: #66afe9;\n      --rdg-font-size: 14px;\n\n      display: grid;\n\n      color-scheme: var(--rdg-color-scheme, light dark);\n\n      /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n      /* We set a stacking context so internal elements don't render on top of external elements. */\n      contain: strict;\n      content-visibility: auto;\n      block-size: 350px;\n      border: 1px solid var(--rdg-border-color);\n      box-sizing: border-box;\n      overflow: auto;\n      background-color: var(--rdg-background-color);\n      color: var(--rdg-color);\n      font-size: var(--rdg-font-size);\n\n      /* needed on Firefox */\n      &::before {\n        content: '';\n        grid-column: 1/-1;\n        grid-row: 1/-1;\n      }\n\n      &.rdg-dark {\n        --rdg-color-scheme: dark;\n        ${darkTheme}\n      }\n\n      &.rdg-light {\n        --rdg-color-scheme: light;\n      }\n\n      @media (prefers-color-scheme: dark) {\n        &:not(.rdg-light) {\n          ${darkTheme}\n        }\n      }\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  @layer rdg.Root {\n    user-select: none;\n\n    & .${row} {\n      cursor: move;\n    }\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  @layer rdg.FocusSink {\n    grid-column: 1/-1;\n    pointer-events: none;\n    /* Should have a higher value than 2 to show up above header row */\n    z-index: 3;\n  }\n`;\n","import { forwardRef, useState, useRef, useImperativeHandle, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes, KeyboardEvent } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\n\nimport {\n  useColumnWidths,\n  useLayoutEffect,\n  useGridDimensions,\n  useCalculatedColumns,\n  useViewportColumns,\n  useViewportRows,\n  useLatestFunc,\n  RowSelectionChangeProvider,\n  RowSelectionProvider\n} from './hooks';\nimport {\n  abs,\n  assertIsValidKeyGetter,\n  canExitGrid,\n  createCellEvent,\n  getColSpan,\n  getNextSelectedCellPosition,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  isSelectedCellEditable,\n  renderMeasuringCells,\n  scrollIntoView,\n  sign\n} from './utils';\nimport type {\n  CalculatedColumn,\n  Column,\n  Position,\n  RowsChangeData,\n  SelectRowEvent,\n  FillEvent,\n  CopyEvent,\n  PasteEvent,\n  CellNavigationMode,\n  SortColumn,\n  RowHeightArgs,\n  Maybe,\n  Renderers,\n  Direction,\n  CellMouseEvent,\n  CellClickArgs,\n  CellKeyDownArgs,\n  CellKeyboardEvent\n} from './types';\nimport {\n  DataGridDefaultRenderersProvider,\n  useDefaultRenderers\n} from './DataGridDefaultRenderersProvider';\nimport DragHandle from './DragHandle';\nimport EditCell from './EditCell';\nimport GroupRowRenderer from './GroupRow';\nimport HeaderRow from './HeaderRow';\nimport { defaultRowRenderer } from './Row';\nimport type { PartialPosition } from './ScrollToCell';\nimport ScrollToCell from './ScrollToCell';\nimport SummaryRow from './SummaryRow';\nimport { checkboxFormatter as defaultCheckboxFormatter } from './formatters';\nimport { default as defaultSortStatus } from './sortStatus';\nimport { rootClassname, viewportDraggingClassname, focusSinkClassname } from './style/core';\nimport { rowSelected, rowSelectedWithFrozenCell } from './style/row';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'formatter' | 'width' | 'minWidth' | 'maxWidth' | 'resizable' | 'sortable'\n>;\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToCell: (position: PartialPosition) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  'aria-label' | 'aria-labelledby' | 'aria-describedby' | 'className' | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the top of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  topSummaryRows?: Maybe<readonly SR[]>;\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  bottomSummaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: R) => K>;\n  onRowsChange?: Maybe<(rows: R[], data: RowsChangeData<R, SR>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<R>) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<K>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<R, SR>>;\n  groupBy?: Maybe<readonly string[]>;\n  rowGrouper?: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds?: Maybe<ReadonlySet<unknown>>;\n  onExpandedGroupIdsChange?: Maybe<(expandedGroupIds: Set<unknown>) => void>;\n  onFill?: Maybe<(event: FillEvent<R>) => R>;\n  onCopy?: Maybe<(event: CopyEvent<R>) => void>;\n  onPaste?: Maybe<(event: PasteEvent<R>) => R>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a cell is clicked */\n  onCellClick?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  /** Function called whenever a cell is double clicked */\n  onCellDoubleClick?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  /** Function called whenever a cell is right clicked */\n  onCellContextMenu?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  onCellKeyDown?: Maybe<(args: CellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  renderers?: Maybe<Renderers<R, SR>>;\n  rowClass?: Maybe<(row: R, rowIdx: number) => Maybe<string>>;\n  /** @default 'ltr' */\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  props: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  const {\n    // Grid and data Props\n    columns: rawColumns,\n    rows: rawRows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight: rawRowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    // Event props\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onCellKeyDown,\n    onScroll,\n    onColumnResize,\n    onFill,\n    onCopy,\n    onPaste,\n    // Toggles and modes\n    enableVirtualization: rawEnableVirtualization,\n    // Miscellaneous\n    renderers,\n    className,\n    style,\n    rowClass,\n    direction: rawDirection,\n    // ARIA\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'data-testid': testId\n  } = props;\n\n  /**\n   * defaults\n   */\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const rowHeight = rawRowHeight ?? 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const rowRenderer = renderers?.rowRenderer ?? defaultRenderers?.rowRenderer ?? defaultRowRenderer;\n  const sortStatus = renderers?.sortStatus ?? defaultRenderers?.sortStatus ?? defaultSortStatus;\n  const checkboxFormatter =\n    renderers?.checkboxFormatter ?? defaultRenderers?.checkboxFormatter ?? defaultCheckboxFormatter;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultRenderers?.noRowsFallback;\n  const enableVirtualization = rawEnableVirtualization ?? true;\n  const direction = rawDirection ?? 'ltr';\n\n  const headerRowsCount = 1;\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n  const minRowIdx = -headerAndTopSummaryRowsCount;\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [resizedColumnWidths, setResizedColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [measuredColumnWidths, setMeasuredColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>(\n    () => ({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' })\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [scrollToPosition, setScrollToPosition] = useState<PartialPosition | null>(null);\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const rowRef = useRef<HTMLDivElement>(null);\n  const shouldFocusCellRef = useRef(false);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      sortStatus,\n      checkboxFormatter\n    }),\n    [sortStatus, checkboxFormatter]\n  );\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rawRows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rawRows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rawRows, selectedRows, rowKeyGetter]);\n\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    measuredColumnWidths,\n    resizedColumnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    isGroupRow\n  });\n\n  const { gridTemplateColumns, handleColumnResize } = useColumnWidths(\n    columns,\n    viewportColumns,\n    templateColumns,\n    gridRef,\n    gridWidth,\n    resizedColumnWidths,\n    measuredColumnWidths,\n    setResizedColumnWidths,\n    setMeasuredColumnWidths,\n    onColumnResize\n  );\n\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onCellClickLatest = useLatestFunc(onCellClick);\n  const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\n  const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectCellLatest = useLatestFunc(selectCell);\n  const selectGroupLatest = useLatestFunc((rowIdx: number) => {\n    selectCell({ rowIdx, idx: -1 });\n  });\n  const selectHeaderCellLatest = useLatestFunc((idx: number) => {\n    selectCell({ rowIdx: minRowIdx, idx });\n  });\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\n    ) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n\n    if (selectedPosition.idx === -1) {\n      rowRef.current!.focus({ preventScroll: true });\n      scrollIntoView(rowRef.current);\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (!shouldFocusCellRef.current) return;\n    shouldFocusCellRef.current = false;\n    const cell = getCellToScroll(gridRef.current!);\n    if (cell === null) return;\n\n    scrollIntoView(cell);\n    // Focus cell content when available instead of the cell itself\n    const elementToFocus = cell.querySelector<Element & HTMLOrSVGElement>('[tabindex=\"0\"]') ?? cell;\n    elementToFocus.focus({ preventScroll: true });\n  });\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToCell({ idx, rowIdx }) {\n      const scrollToIdx =\n        idx !== undefined && idx > lastFrozenColumnIndex && idx < columns.length ? idx : undefined;\n      const scrollToRowIdx =\n        rowIdx !== undefined && isRowIdxWithinViewportBounds(rowIdx) ? rowIdx : undefined;\n\n      if (scrollToIdx !== undefined || scrollToRowIdx !== undefined) {\n        setScrollToPosition({ idx: scrollToIdx, rowIdx: scrollToRowIdx });\n      }\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectRow(args: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n    if (args.type === 'HEADER') {\n      selectAllRows(args.checked);\n      return;\n    }\n\n    const { row, checked, isShiftClick } = args;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectAllRows(checked: boolean) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n\n    for (const row of rawRows) {\n      const rowKey = rowKeyGetter(row);\n      if (checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleKeyDown(event: KeyboardEvent<HTMLDivElement>) {\n    const { idx, rowIdx, mode } = selectedPosition;\n    if (mode === 'EDIT') return;\n\n    const row = rows[rowIdx];\n    if (!isGroupRow(row) && onCellKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onCellKeyDown(\n        {\n          mode: 'SELECT',\n          row,\n          column: columns[idx],\n          rowIdx,\n          selectCell\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = hasGroups && event.target === rowRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { key, keyCode } = event;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      (onPaste != null || onCopy != null) &&\n      isCtrlKeyHeldDown(event) &&\n      !isGroupRow(rows[rowIdx])\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (\n      isRowIdxWithinViewportBounds(rowIdx) &&\n      isGroupRow(row) &&\n      selectedPosition.idx === -1 &&\n      // Collapse the current group row if it is focused and is in expanded state\n      ((key === leftKey && row.isExpanded) ||\n        // Expand the current group row if it is focused and is in collapsed state\n        (key === rightKey && !row.isExpanded))\n    ) {\n      event.preventDefault(); // Prevents scrolling\n      toggleGroup(row.id);\n      return;\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      // scrollLeft is nagative when direction is rtl\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function updateRow(column: CalculatedColumn<R, SR>, rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    if (row === rawRows[rawRowIdx]) return;\n    const updatedRows = [...rawRows];\n    updatedRows[rawRowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rawRowIdx],\n      column\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[getRawRowIdx(rowIdx)];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({ row: sourceRow, columnKey: sourceColumnKey });\n    onCopy?.({ sourceRow, sourceColumnKey });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetColumn = columns[idx];\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: targetColumn.key\n    });\n\n    updateRow(targetColumn, rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ type: 'ROW', row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinViewportBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position, isGroupRow })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (isSamePosition(selectedPosition, position)) {\n      // Avoid re-renders if the selected cell state is the same\n      scrollIntoView(getCellToScroll(gridRef.current!));\n    } else {\n      shouldFocusCellRef.current = true;\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (key === leftKey && isRowSelected && isGroupRow(row) && !row.isExpanded && row.level !== 0) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let cellNavigationMode: CellNavigationMode = 'NONE';\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      cellNavigationMode = 'CHANGE_ROW';\n    }\n\n    // Do not allow focus to leave and prevent scrolling\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds,\n      isGroupRow\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getDragHandle(rowIdx: number) {\n    if (\n      selectedPosition.rowIdx !== rowIdx ||\n      selectedPosition.mode === 'EDIT' ||\n      hasGroups || // drag fill is not supported when grouping is enabled\n      onFill == null\n    ) {\n      return;\n    }\n\n    return (\n      <DragHandle\n        rows={rawRows}\n        columns={columns}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    const closeEditor = (shouldFocusCell: boolean) => {\n      shouldFocusCellRef.current = shouldFocusCell;\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges: boolean, shouldFocusCell: boolean) => {\n      if (commitChanges) {\n        // Prevents two issues when editor is closed by clicking on a different cell\n        //\n        // Otherwise commitEditorChanges may be called before the cell state is changed to\n        // SELECT and this results in onRowChange getting called twice.\n        flushSync(() => {\n          updateRow(column, selectedPosition.rowIdx, row);\n          closeEditor(shouldFocusCell);\n        });\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor(false);\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n        onKeyDown={onCellKeyDown}\n        navigate={navigate}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    const selectedColumn = columns[selectedPosition.idx];\n    if (\n      // idx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements: React.ReactNode[] = [];\n    let startRowIndex = 0;\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = columns[selectedIdx];\n      // selectedIdx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        const isGroupRowSelected =\n          isSelectable && row.childRows.every((cr) => selectedRows.has(rowKeyGetter!(cr)));\n        rowElements.push(\n          <GroupRowRenderer\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerAndTopSummaryRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            aria-selected={isSelectable ? isGroupRowSelected : undefined}\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={rowColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            row={row}\n            gridRowStart={gridRowStart}\n            height={getRowHeight(rowIdx)}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n            isRowSelected={isGroupRowSelected}\n            selectGroup={selectGroupLatest}\n            toggleGroup={toggleGroupLatest}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      } else {\n        key = hasGroups ? startRowIndex : rowIdx;\n      }\n\n      rowElements.push(\n        rowRenderer(key, {\n          // aria-rowindex is 1 based\n          'aria-rowindex': headerAndTopSummaryRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1,\n          'aria-selected': isSelectable ? isRowSelected : undefined,\n          rowIdx,\n          row,\n          viewportColumns: rowColumns,\n          isRowSelected,\n          onCellClick: onCellClickLatest,\n          onCellDoubleClick: onCellDoubleClickLatest,\n          onCellContextMenu: onCellContextMenuLatest,\n          rowClass,\n          gridRowStart,\n          height: getRowHeight(rowIdx),\n          copiedCellIdx:\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined,\n\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n          setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n          lastFrozenColumnIndex,\n          onRowChange: handleFormatterRowChangeLatest,\n          selectCell: selectCellLatest,\n          selectedCellDragHandle: getDragHandle(rowIdx),\n          selectedCellEditor: getCellEditor(rowIdx)\n        })\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `${headerRowHeight}px`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused =\n    selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          // set scrollPadding to correctly position non-sticky cells after scrolling\n          scrollPaddingInlineStart:\n            selectedPosition.idx > lastFrozenColumnIndex || scrollToPosition?.idx !== undefined\n              ? `${totalFrozenColumnWidth}px`\n              : undefined,\n          scrollPaddingBlock:\n            isRowIdxWithinViewportBounds(selectedPosition.rowIdx) ||\n            scrollToPosition?.rowIdx !== undefined\n              ? `${headerRowHeight + topSummaryRowsCount * summaryRowHeight}px ${\n                  bottomSummaryRowsCount * summaryRowHeight\n                }px`\n              : undefined,\n          gridTemplateColumns,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-summary-row-height': `${summaryRowHeight}px`,\n          '--rdg-sign': isRtl ? -1 : 1,\n          ...layoutCssVars\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      {/* extra div is needed for row navigation in a treegrid */}\n      {hasGroups && (\n        <div\n          ref={rowRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1\n          }}\n          onKeyDown={handleKeyDown}\n        />\n      )}\n      {scrollToPosition !== null && (\n        <ScrollToCell\n          scrollToPosition={scrollToPosition}\n          setScrollToCellPosition={setScrollToPosition}\n          gridElement={gridRef.current!}\n        />\n      )}\n      <DataGridDefaultRenderersProvider value={defaultGridComponents}>\n        <RowSelectionChangeProvider value={selectRowLatest}>\n          <RowSelectionProvider value={allRowsSelected}>\n            <HeaderRow\n              columns={getRowViewportColumns(-1)}\n              onColumnResize={handleColumnResizeLatest}\n              sortColumns={sortColumns}\n              onSortColumnsChange={onSortColumnsChangeLatest}\n              lastFrozenColumnIndex={lastFrozenColumnIndex}\n              selectedCellIdx={\n                selectedPosition.rowIdx === minRowIdx ? selectedPosition.idx : undefined\n              }\n              selectCell={selectHeaderCellLatest}\n              shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n              direction={direction}\n            />\n          </RowSelectionProvider>\n        </RowSelectionChangeProvider>\n        {rows.length === 0 && noRowsFallback ? (\n          noRowsFallback\n        ) : (\n          <>\n            {topSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerRowsCount + rowIdx + 1;\n              const summaryRowIdx = rowIdx + minRowIdx + 1;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top = headerRowHeight + summaryRowHeight * rowIdx;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={gridRowStart}\n                  key={rowIdx}\n                  rowIdx={summaryRowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={undefined}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  isTop\n                  showBorder={rowIdx === topSummaryRowsCount - 1}\n                  selectCell={selectCellLatest}\n                />\n              );\n            })}\n            <RowSelectionChangeProvider value={selectRowLatest}>\n              {getViewportRows()}\n            </RowSelectionChangeProvider>\n            {bottomSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;\n              const summaryRowIdx = rows.length + rowIdx;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top =\n                clientHeight > totalRowHeight\n                  ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx)\n                  : undefined;\n              const bottom =\n                top === undefined\n                  ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx)\n                  : undefined;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={headerAndTopSummaryRowsCount + rowsCount + rowIdx + 1}\n                  key={rowIdx}\n                  rowIdx={summaryRowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={bottom}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  isTop={false}\n                  showBorder={rowIdx === 0}\n                  selectCell={selectCellLatest}\n                />\n              );\n            })}\n          </>\n        )}\n\n        {/* render empty cells that span only 1 column so we can safely measure column widths, regardless of colSpan */}\n        {renderMeasuringCells(viewportColumns)}\n      </DataGridDefaultRenderersProvider>\n    </div>\n  );\n}\n\nlet getCellToScrollExpression: XPathExpression | undefined;\n\nfunction getCellToScroll(gridEl: HTMLDivElement) {\n  getCellToScrollExpression ??= document.createExpression('div[@role=\"row\"]/div[@tabindex=\"0\"]');\n  // XPathResult.ANY_UNORDERED_NODE_TYPE === 8\n  return getCellToScrollExpression.evaluate(gridEl, 8).singleNodeValue as HTMLDivElement | null;\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { css } from '@linaria/core';\n\nimport type { EditorProps } from '../types';\n\nconst textEditorInternalClassname = css`\n  @layer rdg.TextEditor {\n    appearance: none;\n\n    box-sizing: border-box;\n    inline-size: 100%;\n    block-size: 100%;\n    padding-block: 0;\n    padding-inline: 6px;\n    border: 2px solid #ccc;\n    vertical-align: top;\n    color: var(--rdg-color);\n    background-color: var(--rdg-background-color);\n\n    font-family: inherit;\n    font-size: var(--rdg-font-size);\n\n    &:focus {\n      border-color: var(--rdg-selection-color);\n      outline: none;\n    }\n\n    &::placeholder {\n      color: #999;\n      opacity: 1;\n    }\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function textEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n"],"names":["getColSpan","column","lastFrozenColumnIndex","args","colSpan","Number","isInteger","frozen","idx","undefined","scrollIntoView","element","inline","block","createCellEvent","event","defaultPrevented","cellEvent","preventGridDefault","isGridDefaultPrevented","Object","setPrototypeOf","getPrototypeOf","nonInputKeys","Set","isCtrlKeyHeldDown","e","ctrlKey","metaKey","key","isDefaultCellInput","has","onEditorNavigation","target","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","measuringCellClassname","renderMeasuringCells","viewportColumns","_jsx","_Fragment","children","map","minWidth","maxWidth","className","style","gridColumnStart","isSelectedCellEditable","selectedPosition","columns","rows","isGroupRow","row","rowIdx","isCellEditable","editor","rowGroup","editable","getSelectedCellColSpan","topSummaryRows","bottomSummaryRows","topSummaryRowsCount","length","minRowIdx","type","getNextSelectedCellPosition","cellNavigationMode","colSpanColumns","maxRowIdx","currentPosition","currentIdx","nextPosition","isCellWithinBounds","nextIdx","nextRowIdx","setColSpan","moveRight","colIdx","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","canExitGrid","maxColIdx","shiftKey","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","cell","cellClassname","cellFrozen","cellFrozenClassname","cellFrozenLast","cellFrozenLastClassname","getRowStyle","height","getCellStyle","gridColumnEnd","insetInlineStart","getCellClassname","extraClasses","clsx","isLastFrozenColumn","min","max","round","floor","sign","abs","Math","assertIsValidKeyGetter","keyGetter","Error","clampColumnWidth","width","RowSelectionContext","createContext","RowSelectionProvider","Provider","RowSelectionChangeContext","RowSelectionChangeProvider","useRowSelection","rowSelectionContext","useContext","rowSelectionChangeContext","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","checkboxFormatter","onChange","props","handleChange","checked","nativeEvent","_jsxs","disabled","DataGridDefaultRenderersContext","DataGridDefaultRenderersProvider","useDefaultRenderers","SelectCellFormatter","value","tabIndex","ariaLabel","ariaLabelledBy","valueFormatter","groupCellContent","groupCellContentClassname","caret","caretClassname","toggleGroupFormatter","ToggleGroup","groupKey","isExpanded","toggleGroup","handleKeyDown","d","onKeyDown","viewBox","SELECT_COLUMN_KEY","HeaderRenderer","isRowSelected","onRowSelectionChange","SelectFormatter","isShiftClick","SelectGroupFormatter","SelectColumn","name","resizable","sortable","headerRenderer","formatter","groupFormatter","DEFAULT_COLUMN_WIDTH","DEFAULT_COLUMN_MIN_WIDTH","useCalculatedColumns","rawColumns","measuredColumnWidths","resizedColumnWidths","viewportWidth","scrollLeft","defaultColumnOptions","rawGroupBy","enableVirtualization","defaultWidth","defaultMinWidth","defaultMaxWidth","defaultFormatter","defaultSortable","defaultResizable","groupBy","useMemo","rawColumn","includes","sort","aKey","frozenA","bKey","frozenB","indexOf","forEach","push","templateColumns","layoutCssVars","totalFrozenColumnWidth","columnMetrics","Map","left","get","set","columnMetric","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","useLayoutEffect","window","useEffect","useOriginalLayoutEffect","useColumnWidths","gridRef","gridWidth","setResizedColumnWidths","setMeasuredColumnWidths","onColumnResize","prevGridWidthRef","useRef","columnsCanFlex","ignorePreviouslyMeasuredColumns","current","newTemplateColumns","columnsToMeasure","gridTemplateColumns","join","updateMeasuredWidths","newMeasuredColumnWidths","hasChanges","measuredWidth","measureColumnWidth","delete","handleColumnResize","nextWidth","resizingKey","flushSync","newResizedColumnWidths","selector","CSS","escape","measuringCell","querySelector","getBoundingClientRect","useGridDimensions","inlineSize","setInlineSize","useState","blockSize","setBlockSize","ResizeObserver","clientWidth","clientHeight","offsetWidth","offsetHeight","initialWidth","initialHeight","resizeObserver","entries","size","contentBoxSize","observe","disconnect","useLatestFunc","fn","ref","callbackFn","useCallback","useRovingTabIndex","isSelected","isChildFocused","setIsChildFocused","onFocus","currentTarget","isFocusable","childTabIndex","useViewportColumns","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","isReadonlyArray","arr","Array","isArray","useViewportRows","rawRows","rowHeight","scrollTop","rowGrouper","expandedGroupIds","groupedRows","rowsCount","groupRows","groupByKey","remainingGroupByKeys","startRowIndex","groupRowsCount","groups","childRows","childGroups","childRowsCount","allGroupRows","flattenedRows","expandGroup","parentId","level","keys","posInSet","id","groupRow","setSize","add","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","top","validateRowIdx","start","end","middle","currentOffset","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","cellDragHandle","cellDragHandleClassname","DragHandle","latestDraggedOverRowIdx","onRowsChange","onFill","setDragging","setDraggedOverRowIdx","handleMouseDown","buttons","addEventListener","onMouseOver","onMouseUp","removeEventListener","handleDragEnd","overRowIdx","endRowIndex","updateRows","handleDoubleClick","stopPropagation","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","columnKey","targetRow","onMouseDown","onDoubleClick","cellEditing","EditCell","onRowChange","closeEditor","navigate","frameRequestRef","commitOnOutsideClick","editorOptions","commitOnOutsideMouseDown","onClose","onWindowCaptureMouseDown","requestAnimationFrame","capture","cancelFrameRequest","cancelAnimationFrame","mode","onEditorClose","commitChanges","shouldFocusCell","onEditorRowChange","commitChangesAndFocus","cellClass","renderFormatter","role","onMouseDownCapture","GroupCell","isCellSelected","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","onClick","memo","rowClassname","rowSelected","rowSelectedClassname","rowSelectedWithFrozenCell","groupRowClassname","GroupedRow","gridRowStart","selectedCellIdx","selectGroup","handleSelectGroup","headerSortCell","headerSortCellClassname","headerSortName","headerSortNameClassname","sortDirection","priority","onSort","SortableHeaderCell","sortStatus","preventDefault","handleClick","cellResizable","cellResizableClassname","HeaderCell","sortColumns","onSortColumnsChange","selectCell","shouldFocusGrid","direction","isRtl","sortIndex","findIndex","sortColumn","ariaSort","headerCellClass","defaultHeaderRenderer","onPointerDown","pointerType","pointerId","right","clientX","onPointerMove","onLostPointerCapture","setPointerCapture","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","handleFocus","headerRow","headerRowClassname","HeaderRow","cells","index","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","Cell","isCopied","isDraggedOver","dragHandle","onContextMenu","isEditable","selectCellWrapper","openEditor","handleContextMenu","handleRowChange","newRow","Row","copiedCellIdx","draggedOverCellIdx","selectedCellEditor","selectedCellDragHandle","onCellClick","onCellDoubleClick","onCellContextMenu","rowClass","onMouseEnter","handleDragEnter","RowComponent","forwardRef","defaultRowRenderer","ScrollToCell","scrollToPosition","gridElement","setScrollToCellPosition","removeScrollToCell","observer","IntersectionObserver","root","threshold","gridColumn","gridRow","summaryCellClassname","SummaryCell","summaryCellClass","summaryFormatter","summaryRow","topSummaryRow","topSummaryRowBorderClassname","bottomSummaryRowBorderClassname","summaryRowClassname","topSummaryRowClassname","SummaryRow","bottom","isTop","showBorder","ariaRowIndex","arrow","arrowClassname","sortIcon","sortPriority","rootClassname","viewportDragging","viewportDraggingClassname","focusSinkClassname","DataGrid","rowKeyGetter","rawRowHeight","headerRowHeight","rawHeaderRowHeight","summaryRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","onExpandedGroupIdsChange","onCellKeyDown","onScroll","onCopy","onPaste","rawEnableVirtualization","renderers","rawDirection","ariaDescribedBy","testId","defaultRenderers","rowRenderer","defaultSortStatus","defaultCheckboxFormatter","noRowsFallback","headerRowsCount","bottomSummaryRowsCount","summaryRowsCount","headerAndTopSummaryRowsCount","setScrollTop","setScrollLeft","setSelectedPosition","copiedCell","setCopiedCell","isDragging","draggedOverRowIdx","setOverRowIdx","setScrollToPosition","prevSelectedPosition","lastSelectedRowIdx","rowRef","shouldFocusCellRef","gridHeight","isSelectable","leftKey","rightKey","defaultGridComponents","allRowsSelected","every","hasGroups","minColIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","handleColumnResizeLatest","onSortColumnsChangeLatest","onCellClickLatest","onCellDoubleClickLatest","onCellContextMenuLatest","selectRowLatest","selectRow","handleFormatterRowChangeLatest","updateRow","selectCellLatest","selectGroupLatest","selectHeaderCellLatest","toggleGroupLatest","isSamePosition","focus","preventScroll","getCellToScroll","elementToFocus","useImperativeHandle","scrollToCell","scrollToIdx","scrollToRowIdx","isRowIdxWithinViewportBounds","selectAllRows","newSelectedRows","childRow","rowKey","previousRowIdx","step","expandedGroupId","newExpandedGroupIds","Element","isCellEvent","closest","isRowEvent","keyCode","cKey","vKey","handleCopy","handlePaste","handleCellInput","handleScroll","getRawRowIdx","rawRowIdx","commitEditorChanges","sourceColumnKey","targetColumn","updatedTargetRow","targetColumnKey","originalRow","isColIdxWithinSelectionBounds","enableEditor","getNextPosition","parentRowIdx","parentRow","nextRowY","nextSelectedCellPosition","getDraggedOverCellIdx","currentRowIdx","getDragHandle","getCellEditor","getRowViewportColumns","selectedColumn","slice","getViewportRows","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","isGroupRowSelected","cr","GroupRowRenderer","c","templateRows","isGroupRowFocused","scrollPaddingInlineStart","scrollPaddingBlock","dir","summaryRowIdx","isSummaryRowSelected","getCellToScrollExpression","gridEl","document","createExpression","evaluate","singleNodeValue","p1","p2","textEditorInternalClassname","textEditorClassname","autoFocusAndSelect","input","select","textEditor","onBlur"],"mappings":"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"}